name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install Rust and cargo-edit so the exec plugin can bump Cargo.toml versions
      - name: Setup Rust toolchain (for version bump)
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit --locked

      - name: Cache semantic-release
        uses: actions/cache@v4
        id: semantic-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-semantic-release-${{ hashFiles('.releaserc*') }}
          restore-keys: |
            ${{ runner.os }}-semantic-release-

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 24
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
            @semantic-release/github@10
            @semantic-release/exec@6
            conventional-changelog-conventionalcommits@8

  build:
    name: Build ${{ matrix.display_name || matrix.targets }}
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            targets: x86_64-unknown-linux-gnu
            display_name: Linux x64
          - runner: ubuntu-latest
            targets: aarch64-unknown-linux-gnu
            display_name: Linux arm64
          - runner: macos-latest
            targets: x86_64-apple-darwin
            display_name: macOS x64
          - runner: macos-latest
            targets: aarch64-apple-darwin
            display_name: macOS arm64
          - runner: windows-latest
            targets: x86_64-pc-windows-msvc
            display_name: Windows x64
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.new_release_git_tag }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-on-failure: true
          shared-key: v0-rust

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.targets }}

      - name: Setup Python for PyO3
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install cross
        if: runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            if [[ "${{ matrix.targets }}" == *"aarch64"* ]]; then
              export PYO3_CROSS_PYTHON_VERSION=3.10
              export PYO3_CROSS=1
            fi
            cross build --release --target ${{ matrix.targets }} --bin fastest
          else
            cargo build --release --target ${{ matrix.targets }} --bin fastest
          fi

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cargo build --release --target ${{ matrix.targets }} --bin fastest
          
      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          $ARCHIVE_NAME = "fastest-${{ needs.semantic-release.outputs.new_release_version }}-${{ matrix.targets }}.zip"
          Copy-Item "target/${{ matrix.targets }}/release/fastest.exe" -Destination "artifacts/"
          Set-Location artifacts
          Compress-Archive -Path "fastest.exe" -DestinationPath $ARCHIVE_NAME
          Set-Location ..

      - name: Package artifacts (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p artifacts
          ARCHIVE_NAME="fastest-${{ needs.semantic-release.outputs.new_release_version }}-${{ matrix.targets }}.tar.gz"
          cp target/${{ matrix.targets }}/release/fastest artifacts/
          cd artifacts && tar czf $ARCHIVE_NAME fastest && cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.targets }}
          path: artifacts/*
          retention-days: 1

  publish:
    name: Publish Release
    needs: [semantic-release, build]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.new_release_git_tag }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: release-artifacts
          merge-multiple: true

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find release-artifacts -type f -name "*" | sort

      - name: Create checksums
        run: |
          cd release-artifacts
          sha256sum * > checksums.sha256
          echo "Checksums:"
          cat checksums.sha256

      - name: Attach artifacts to release
        run: |
          gh release upload ${{ needs.semantic-release.outputs.new_release_git_tag }} release-artifacts/* --clobber

      # Crates.io publishing removed - not needed for this project

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: release-artifacts/*