name: Semantic Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    outputs:
      release_created: ${{ steps.check.outputs.release_created }}
      release_tag: ${{ steps.check.outputs.release_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          npm install -g \
            semantic-release@23 \
            @semantic-release/changelog@6 \
            @semantic-release/git@10 \
            @semantic-release/github@10 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@7

      - name: Get current latest tag
        id: current-tag
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "current_tag=${CURRENT_TAG}" >> $GITHUB_OUTPUT

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Check if release was created
        id: check
        run: |
          # Get the new latest tag
          NEW_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          CURRENT_TAG="${{ steps.current-tag.outputs.current_tag }}"
          
          if [[ "${NEW_TAG}" != "${CURRENT_TAG}" ]] && [[ -n "${NEW_TAG}" ]]; then
            echo "Release created: ${NEW_TAG}"
            echo "release_created=true" >> $GITHUB_OUTPUT
            echo "release_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          else
            echo "No new release created"
            echo "release_created=false" >> $GITHUB_OUTPUT
          fi

  build-binaries:
    name: Build binaries
    needs: semantic-release
    if: needs.semantic-release.outputs.release_created == 'true'
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_name: fastest-linux-amd64.tar.gz
          # Linux aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_name: fastest-linux-arm64.tar.gz
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            archive_name: fastest-darwin-amd64.tar.gz
          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            archive_name: fastest-darwin-arm64.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.release_tag }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Create archive
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/fastest dist/
          chmod +x dist/fastest
          tar -czf ${{ matrix.archive_name }} -C dist fastest
          
      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.archive_name }}
          asset_name: ${{ matrix.archive_name }}
          tag: ${{ needs.semantic-release.outputs.release_tag }}
          overwrite: true